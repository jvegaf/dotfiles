" vim-bootstrap 2024-01-27 12:05:42

"*****************************************************************************
"" Vim-Plug core
"*****************************************************************************
let vimplug_exists=expand('~/.vim/autoload/plug.vim')
if has('win32')&&!has('win64')
  let curl_exists=expand('C:\Windows\Sysnative\curl.exe')
else
  let curl_exists=expand('curl')
endif

let g:vim_bootstrap_langs = "c,html,javascript,lua,python,typescript"
let g:vim_bootstrap_editor = "vim"				" nvim or vim
let g:vim_bootstrap_theme = "onedark"
let g:vim_bootstrap_frams = ""

if !filereadable(vimplug_exists)
  if !executable(curl_exists)
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent exec "!"curl_exists" -fLo " . shellescape(vimplug_exists) . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" Required:
call plug#begin(expand('~/.vim/plugged'))

"*****************************************************************************
"" Plug install packages
"*****************************************************************************
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

let g:gitgutter_map_keys = get(g:, 'gitgutter_map_keys', 0)

Plug 'airblade/vim-gitgutter'

nmap <silent> ]g :GitGutterNextHunk<CR>
nmap <silent> [g :GitGutterPrevHunk<CR>

Plug 'vim-scripts/grep.vim'
Plug 'vim-scripts/CSApprox'
Plug 'Raimondi/delimitMate'
Plug 'majutsushi/tagbar'
Plug 'dense-analysis/ale'
Plug 'Yggdroot/indentLine'
Plug 'editor-bootstrap/vim-bootstrap-updater'
Plug 'tpope/vim-rhubarb' " required by fugitive to :GBrowse
Plug 'joshdick/onedark.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tomasr/molokai'
Plug 'ku1ik/vim-monokai'
Plug 'machakann/vim-highlightedyank'

"Dart/Flutter
Plug 'dart-lang/dart-vim-plugin'
Plug 'thosakwe/vim-flutter'
Plug 'natebosch/vim-lsc'
Plug 'natebosch/vim-lsc-dart'


if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif
let g:make = 'gmake'
if exists('make')
        let g:make = 'make'
endif
Plug 'Shougo/vimproc.vim', {'do': g:make}

"" Vim-Session
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

"" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

"*****************************************************************************
"" Custom bundles
"*****************************************************************************

" c
Plug 'vim-scripts/c.vim', {'for': ['c', 'cpp']}
Plug 'ludwig/split-manpage.vim'

let g:cpp_class_scope_highlight = get(g:, 'cpp_class_scope_highlight', 1)
let g:cpp_class_decl_highlight = get(g:, 'cpp_class_decl_highlight', 1)
let g:cpp_no_function_highlight = get(g:, 'cpp_no_function_highlight', 1)

Plug 'octol/vim-cpp-enhanced-highlight'

" html
"" HTML Bundle
Plug 'hail2u/vim-css3-syntax'
Plug 'gko/vim-coloresque'
Plug 'tpope/vim-haml'
Plug 'mattn/emmet-vim'


" javascript
"" Javascript Bundle
Plug 'jelera/vim-javascript-syntax'


" lua
"" Lua Bundle
Plug 'xolox/vim-lua-ftplugin'
Plug 'xolox/vim-lua-inspect'


" python
"" Python Bundle
Plug 'davidhalter/jedi-vim'
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}


" typescript
Plug 'leafgarland/typescript-vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'


let g:AutoPairsMapSpace = get(g:, 'AutoPairsMapSpace', 0)

Plug 'jiangmiao/auto-pairs'
Plug 'schickling/vim-bufonly'

nnoremap <Leader>bo :BufOnly<CR>


let g:closetag_emptyTags_caseSensitive =
      \ get(g:, 'g:closetag_emptyTags_caseSensitive', 1)
let g:closetag_filetypes =
      \ get(g:, 'closetag_filetypes', 'html,xhtml,phtml,javascript.jsx,typescript.tsx')

Plug 'alvan/vim-closetag'
Plug 'editorconfig/editorconfig-vim'


let g:Illuminate_delay = get(g:, 'Illuminate_delay', 250)
let g:Illuminate_ftblacklist = get(g:, 'Illuminate_ftblacklist', ['nerdtree'])

Plug 'RRethy/vim-illuminate'
Plug 'Yggdroot/indentLine'
Plug 'haya14busa/is.vim'
Plug 'sbdchd/neoformat'

" TODO: add this to neoformat
" nnoremap <Leader>= :Neoformat<CR>
" vnoremap <Leader>= :Neoformat<CR>

let g:NERDDefaultAlign = get(g:, 'NERDDefaultAlign', 'left')

Plug 'scrooloose/nerdcommenter'
Plug 'danro/rename.vim'
Plug 'tpope/vim-repeat'


let g:sneak#label = get(g:, 'sneak#lable', 1)
let g:sneak#use_ic_scs = get(g:, 'sneak#use_ic_scs', 1)

Plug 'justinmk/vim-sneak'

map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

Plug 'tpope/vim-surround'
Plug 'edkolev/tmuxline.vim'
Plug 'cespare/vim-toml'

let g:undotree_WindowLayout = get(g:, 'undotree_WindowLayout', 4)

Plug 'mbbill/undotree'

nnoremap <Leader>tu :TagbarClose<CR>:UndotreeToggle<CR>


let g:ycm_key_list_select_completion =
      \ get(g:, 'ycm_key_list_select_completion', ['<TAB>', '<Down>'])
let g:ycm_key_list_previous_completion =
      \ get(g:, 'ycm_key_list_previous_completion', ['<S-TAB>', '<Up>'])
let g:ycm_auto_trigger =
      \ get(g:, 'ycm_auto_trigger', 1)
let g:ycm_autoclose_preview_window_after_insertion =
      \ get(g:, 'ycm_autoclose_preview_window_after_insertion', 1)
let g:ycm_seed_identifiers_with_syntax =
      \ get(g:, 'ycm_seed_identifiers_with_syntax', 1)
let g:ycm_collect_identifiers_from_comments_and_strings =
      \ get(g:, 'ycm_collect_identifiers_from_comments_and_strings', 1)
let g:ycm_python_binary_path =
      \ get(g:, 'ycm_python_binary_path', 'python')
let g:ycm_show_diagnostics_ui =
      \ get(g:, 'ycm_show_diagnostics_ui', 0)
let g:ycm_key_detailed_diagnostics =
      \ get(g:, 'ycm_key_detailed_diagnostics', '')
let g:ycm_semantic_triggers = get(g:, 'ycm_semantic_triggers', {
      \ 'c': ['->', '.', 're!\w{3}'],
      \ 'cpp': ['->', '.', '::', 're!\w{3}'],
      \ 'cs' : ['.', 're!\w{3}'],
      \ 'cuda': ['->', '.', '::', 're!\w{3}'],
      \ 'd' : ['.', 're!\w{3}'],
      \ 'elixir' : ['.', 're!\w{3}'],
      \ 'erlang': [':'],
      \ 'go' : ['.', 're!\w{3}'],
      \ 'java' : ['.', 're!\w{3}'],
      \ 'javascript' : ['.', 're!\w{3}'],
      \ 'javascript.jsx' : ['.', 're!\w{3}'],
      \ 'lua': ['.', ':'],
      \ 'objc': ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s'],
      \ 'objcpp': ['->', '.', '::', 're!\w{3}'],
      \ 'ocaml': ['.', '#'],
      \ 'perl': ['->'],
      \ 'perl6' : ['.', 're!\w{3}'],
      \ 'php': ['->', '::'],
      \ 'python' : ['.', 're!\w{3}'],
      \ 'ruby': ['.', '::'],
      \ 'rust': ['.', '::'],
      \ 'scala' : ['.', 're!\w{3}'],
      \ 'sh': ['re![\w-]{2}', '/', '-'],
      \ 'typescript' : ['.', 're!\w{3}'],
      \ 'typescript.tsx' : ['.', 're!\w{3}'],
      \ 'vb' : ['.', 're!\w{3}'],
      \ 'vim': ['re![_a-zA-Z]+[_\w]*\.'],
      \ 'zsh': ['re![\w-]{2}', '/', '-'],
      \ })
let g:ycm_filetype_whitelist = get(g:, 'ycm_filetype_whitelist', {
      \ 'c': 1,
      \ 'cpp': 1,
      \ 'go': 1,
      \ 'java': 1,
      \ 'javascript': 1,
      \ 'javascript.jsx': 1,
      \ 'python': 1,
      \ 'rust': 1,
      \ 'sh': 1,
      \ 'typescript': 1,
      \ 'typescript.tsx': 1,
      \ 'vim': 1,
      \ 'zsh': 1,
      \ })
let g:ycm_extra_conf_globlist = get(g:, 'ycm_extra_conf_globlist', [
      \ '~/*',
      \ ])
let g:custom_ycm_install_options = '--clangd-completer --java-completer  --ts-completer'

Plug 'Valloric/YouCompleteMe', {'do': './install.py ' . g:custom_ycm_install_options}

nnoremap <Leader>jc :YcmCompleter GoToInclude<CR>
nnoremap <Leader>jd :YcmCompleter GoToDeclaration<CR>
nnoremap <Leader>ji :YcmCompleter GoToImplementation<CR>
nnoremap <Leader>jj :YcmCompleter GoToDefinition<CR>
nnoremap <Leader>jr :YcmCompleter GoToReferences<CR>
nnoremap <Leader>jt :YcmCompleter GoToType<CR>

nnoremap <LocalLeader>K :YcmCompleter GetDoc<CR>
nnoremap <LocalLeader>k :YcmCompleter GetType<CR>


Plug 'hecal3/vim-leader-guide'

function! s:leader_guide_display_func()
  let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '#', '', '')
  let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '\c<cr>$', '', '')
  let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '^<SID>', '', '')
  let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, '^<Plug>', '', '')
  let g:leaderGuide#displayname = substitute(g:leaderGuide#displayname, ':call ', '', '')
endfunction

if exists('g:leaderGuide_displayfunc')
  call add(g:leaderGuide_displayfunc, function('s:leader_guide_display_func'))
else
  let g:leaderGuide_displayfunc = [function('s:leader_guide_display_func')]
endif

map <Leader>. <Plug>leaderguide-global
nnoremap <silent> <Leader> :LeaderGuide mapleader<CR>
vnoremap <silent> <Leader> :LeaderGuideVisual mapleader<CR>

" if mapleader != maplocalleader
"   map <LocalLeader>. <Plug>leaderguide-buffer
"   nnoremap <silent> <LocalLeader> :LeaderGuide  maplocalleader<CR>
"   vnoremap <silent> <LocalLeader> :LeaderGuideVisual  maplocalleader<CR>
" endif


Plug 'junegunn/gv.vim'

" Open commit browser
nnoremap <Leader>gV :GV<Space>
" List commits that affected the current file
nnoremap <Leader>gv :GV!<CR>
vnoremap <Leader>gv :GV!<CR>

Plug 'tpope/vim-endwise'


let g:vim_json_syntax_conceal = get(g:, 'vim_json_syntax_conceal', 0)

Plug 'elzr/vim-json'

"*********************************************************************
" GutenYe/json5.vim
"*********************************************************************

if v:version < 901
  Plug 'GutenYe/json5.vim'
endif

Plug 'ekalinin/Dockerfile.vim'

"*********************************************************************
" kevinhui/vim-docker-tools
"*********************************************************************

let g:dockertools_default_all = get(g:, 'dockertools_default_all', 1)
let g:dockertools_sudo_mode  = get(g:, 'dockertools_sudo_mode', 0)
let g:dockertools_docker_cmd = get(g:, 'dockertools_docker_cmd', 'docker')

Plug 'kevinhui/vim-docker-tools'

nnoremap <Leader>td :DockerToolsToggle<CR>

"*****************************************************************************
"*****************************************************************************

"" Include user's extra bundle
if filereadable(expand("~/.vimrc.local.bundles"))
  source ~/.vimrc.local.bundles
endif

call plug#end()

" Required:
filetype plugin indent on


"*****************************************************************************
"" Basic Setup
"*****************************************************************************"
"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set ttyfast
set nocompatible


"" Fix backspace indent
set backspace=indent,eol,start

"" Tabs. May be overridden by autocmd rules
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab

"" Map leader to ,
let mapleader=' '
let maplocalleader=','

"" Enable hidden buffers
set hidden

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set fileformats=unix,dos,mac

if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

" session management
let g:session_directory = "~/.vim/session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1

"*****************************************************************************
"" Visual Settings
"*****************************************************************************
syntax on
set ruler
set number
set relativenumber
set showcmd

" Don’t reset cursor to start of line when moving around
set nostartofline

" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,nbsp:_
set list

let no_buffers_menu=1
" colorscheme onedark
colorscheme molokai
set background=dark


" Better command line completion
set wildmenu

" Allow cursor keys in insert mode
set esckeys


set undodir=~/.vim/undo
set undofile

" mouse support
set mouse=a

set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  endif
else
  let g:CSApprox_loaded = 1

  " IndentLine
  let g:indentLine_enabled = 1
  let g:indentLine_concealcursor = ''
  let g:indentLine_char = '┆'
  let g:indentLine_faster = 1


  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif

endif


if &term =~ '256color'
  set t_ut=
endif


"" Disable the blinking cursor.
set gcr=a:blinkon0

set scrolloff=3


"" Status bar
set laststatus=2

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" vim-airline
" let g:airline_theme = 'powerlineish'
let g:airline_theme = 'molokai'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

nmap <Leader>1 <Plug>AirlineSelectTab1
nmap <Leader>2 <Plug>AirlineSelectTab2
nmap <Leader>3 <Plug>AirlineSelectTab3
nmap <Leader>4 <Plug>AirlineSelectTab4
nmap <Leader>5 <Plug>AirlineSelectTab5
nmap <Leader>6 <Plug>AirlineSelectTab6
nmap <Leader>7 <Plug>AirlineSelectTab7
nmap <Leader>8 <Plug>AirlineSelectTab8
nmap <Leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

nmap <silent> [t <Plug>AirlineSelectPrevTab
nmap <silent> ]t <Plug>AirlineSelectNextTab
"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

"" NERDTree configuration
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['node_modules','\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite,*node_modules/
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <leader>e :NERDTreeToggle<CR>

" grep.vim
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>


"*****************************************************************************
"" Commands
"*****************************************************************************
" remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

"*****************************************************************************
"" Functions
"*****************************************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif


function! s:CloseWindowsAutomatically()
  if winnr('$') != 1
    return
  endif
  if (&buftype == 'quickfix' || (exists('b:NERDTree') && b:NERDTree.isTabTree()))
    q
  endif
endfunction

function! HasFeatures()
  return has('timers') && exists('*job_start') && exists('*ch_close_in')
endfunction

function! IsLinux()
  return has('unix') && !has('macunix') && !has('win32unix')
endfunction

function! IsMac()
  return has('macunix')
endfunction

function! IsWindows()
  return has('win32') || has('win64')
endfunction

function! TrySource(filepath)
  if filereadable(a:filepath)
    execute 'source' fnameescape(a:filepath)
  endif
endfunction


"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************
"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync maxlines=200
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

"" txt
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

"" make/cmake
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

set autoread

augroup CloseWindowsAutomatically
  autocmd!
  autocmd BufEnter * call s:CloseWindowsAutomatically()
augroup END

" autocmd InsertLeave * set nocursorline
" autocmd InsertEnter * set cursorline

if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\\e[2 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' |
    \   silent execute '!echo -ne "\\e[6 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\\e[4 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\\e[ q"' | redraw!
endif

""*****************************************************************************
"" Mappings
"*****************************************************************************

"" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Git commit --verbose<CR>
noremap <Leader>gsh :Git push<CR>
noremap <Leader>gll :Git pull<CR>
noremap <Leader>gs :Git<CR>
noremap <Leader>gb :Git blame<CR>
noremap <Leader>gd :Gvdiffsplit<CR>
noremap <Leader>gr :GRemove<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

"" Tabs
nnoremap <Tab> :bnext<cr>
nnoremap <S-Tab> :bprevious<cr>
nnoremap <silent> <S-t> :tabnew<CR>
nnoremap <silent> W :w<cr>
nnoremap <silent> Q :bdelete<cr>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>


"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>E :e <C-R>=expand("%:p:h") . "/" <CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

nnoremap <ESC>  :nohlsearch<bar>:echo<cr>

"" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>u :FZF -m<CR>
"Recovery commands from history through FZF
nmap <leader>y :History:<CR>

" snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" ale
let g:ale_linters = {}

" Tagbar
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

" Use the OS clipboard by default
" if has('clipboard')
"   if has('unnamedplus')
"     set clipboard=unnamed,unnamedplus
"   else
"     set clipboard=unnamed
"   endif
" endif

set clipboard=unnamedplus



noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>


"" Buffer nav
" noremap <leader>z :bp<CR>
noremap <leader>q :q<CR>
" noremap <leader>x :bn<CR>
" noremap <leader>w :bn<CR>

"" Close buffer
noremap W :w<CR>
noremap Q :bd<CR>

nnoremap vv V

"" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move
execute "set <M-j>=\ej"
execute "set <M-k>=\ek"

nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv
"" Open current line on GitHub
nnoremap <Leader>o :.GBrowse<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %




"*****************************************************************************
"" Custom configs
"*****************************************************************************

" c
autocmd FileType c setlocal tabstop=4 shiftwidth=4 expandtab
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 expandtab


" html
" for html files, 2 spaces
autocmd Filetype html setlocal ts=2 sw=2 expandtab


" javascript
let g:javascript_enable_domhtmlcss = 1

" vim-javascript
augroup vimrc-javascript
  autocmd!
  autocmd FileType javascript setl tabstop=4|setl shiftwidth=4|setl expandtab softtabstop=4
augroup END


" lua


" python
" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

" jedi-vim
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#smart_auto_mappings = 0

" ale
:call extend(g:ale_linters, {
    \'python': ['flake8'], })

" vim-airline
let g:airline#extensions#virtualenv#enabled = 1

" Syntax highlight
let python_highlight_all = 1


" typescript
let g:yats_host_keyword = 1



"*****************************************************************************
"*****************************************************************************

"" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

"*****************************************************************************
"" Convenience variables
"*****************************************************************************

" vim-airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif



function! s:internet_search(q)
  let url ='https://www.google.com/search?q=%s'
  let q = substitute(a:q, '["\n]', ' ', 'g')
  let q = substitute(q, '[[:punct:] ]', '\=printf("%%%02X", char2nr(submatch(0)))', 'g')
  let open = IsLinux() ? 'xdg-open' : 'open'
  call system(printf(open . ' "' . url . '"', q))
endfunction

nnoremap <silent> <Leader>se :call <SID>internet_search(expand('<cWORD>'))<CR>
xnoremap <silent> <Leader>se "gy:call <SID>internet_search(@g)<CR>
