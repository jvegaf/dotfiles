[[mgr.prepend_keymap]]
on = "p"
run = "plugin smart-paste"
desc = "Paste into the hovered directory or CWD"


[[mgr.prepend_keymap]]
on = "f"
run = "plugin jump-to-char"
desc = "Jump to char"


[[mgr.prepend_keymap]]
on = "<C-d>"
run = "plugin diff"
desc = "Diff the selected with the hovered file"


[[mgr.prepend_keymap]]
on = ["c", "m"]
run = "plugin chmod"
desc = "Chmod on selected files"


[[plugin.prepend_fetchers]]
id = "git"
name = "*"
run = "git"


[[mgr.prepend_keymap]]
on = ["g", "c"]
run = "plugin vcs-files"
desc = "Show Git file changes"


[[plugin.prepend_fetchers]]
id = "git"
name = "*/"
run = "git"


[[mgr.prepend_keymap]]
on = "["
run = "plugin whoosh jump_by_key"
desc = "Jump bookmark by key"

# Direct fuzzy search access
[[mgr.prepend_keymap]]
on = "}"
run = "plugin whoosh fuzzy"
desc = "Direct fuzzy search for bookmarks"

# Basic bookmark operations
[[mgr.prepend_keymap]]
on = ["]", "a"]
run = "plugin whoosh save"
desc = "Add bookmark (hovered file/directory)"

[[mgr.prepend_keymap]]
on = ["]", "A"]
run = "plugin whoosh save_cwd"
desc = "Add bookmark (current directory)"

# Temporary bookmarks
[[mgr.prepend_keymap]]
on = ["]", "t"]
run = "plugin whoosh save_temp"
desc = "Add temporary bookmark (hovered file/directory)"

[[mgr.prepend_keymap]]
on = ["]", "T"]
run = "plugin whoosh save_cwd_temp"
desc = "Add temporary bookmark (current directory)"

# Jump to bookmarks
[[mgr.prepend_keymap]]
on = ["]", "f"]
run = "plugin whoosh jump_by_fzf"
desc = "Jump bookmark by fzf"

# Delete bookmarks
[[mgr.prepend_keymap]]
on = ["]", "d"]
run = "plugin whoosh delete_by_key"
desc = "Delete bookmark by key"

[[mgr.prepend_keymap]]
on = ["]", "D"]
run = "plugin whoosh delete_by_fzf"
desc = "Delete bookmarks by fzf (use TAB to select multiple)"

[[mgr.prepend_keymap]]
on = ["]", "C"]
run = "plugin whoosh delete_all"
desc = "Delete all user bookmarks"

# Rename bookmarks
[[mgr.prepend_keymap]]
on = ["]", "r"]
run = "plugin whoosh rename_by_key"
desc = "Rename bookmark by key"

[[mgr.prepend_keymap]]
on = ["]", "R"]
run = "plugin whoosh rename_by_fzf"
desc = "Rename bookmark by fzf"


[[mgr.prepend_keymap]]
on = ["c", "a", "a"]
run = "plugin compress"
desc = "Archive selected files"

[[mgr.prepend_keymap]]
on = ["c", "a", "p"]
run = "plugin compress -p"
desc = "Archive selected files (password)"

[[mgr.prepend_keymap]]
on = ["c", "a", "h"]
run = "plugin compress -ph"
desc = "Archive selected files (password+header)"

[[mgr.prepend_keymap]]
on = ["c", "a", "l"]
run = "plugin compress -l"
desc = "Archive selected files (compression level)"

[[mgr.prepend_keymap]]
on = ["c", "a", "u"]
run = "plugin compress -phl"
desc = "Archive selected files (password+header+level)"

[[mgr.prepend_keymap]]
on = ["c", "i"]
run = "plugin sxiv"
desc = "Preview images in sxiv"

# [mgr]
# prepend_keymap = [
#   # Mount
#   { on = [
#     "M",
#     "m",
#   ], run = "plugin gvfs -- select-then-mount", desc = "Select device then mount" },
#   # or this if you want to jump to mountpoint after mounted
#   { on = [
#     "M",
#     "m",
#   ], run = "plugin gvfs -- select-then-mount --jump", desc = "Select device to mount and jump to its mount point" },
#
#   # This will remount device under current working directory (cwd)
#   #   -> cwd = /run/user/1000/gvfs/DEVICE_1/FOLDER_A
#   #   -> device mountpoint = /run/user/1000/gvfs/DEVICE_1
#   #   -> remount this DEVIEC_1 if needed
#   { on = [
#     "M",
#     "R",
#   ], run = "plugin gvfs -- remount-current-cwd-device", desc = "Remount device under cwd" },
#
#   { on = [
#     "M",
#     "u",
#   ], run = "plugin gvfs -- select-then-unmount", desc = "Select device then unmount" },
#   # Or this if you want to unmount and eject device.
#   #   -> Ejected device can safely be removed.
#   #   -> Ejecting a device will unmount all paritions/volumes under it.
#   #   -> Fallback to normal unmount if not supported by device.
#   { on = [
#     "M",
#     "u",
#   ], run = "plugin gvfs -- select-then-unmount --eject", desc = "Select device then eject" },
#
#   # Also support force unmount/eject.
#   #   -> Ignore outstanding file operations when unmounting or ejecting
#   { on = [
#     "M",
#     "U",
#   ], run = "plugin gvfs -- select-then-unmount --eject --force", desc = "Select device then force to eject/unmount" },
#
#   # Add Scheme/Mount URI:
#   #   -> Available schemes: mtp, gphoto2, smb, sftp, ftp, nfs, dns-sd, dav, davs, dav+sd, davs+sd, afp, afc, sshfs
#   #   -> Read more about the schemes here: https://wiki.gnome.org/Projects(2f)gvfs(2f)schemes.html
#   #   -> Explain about the scheme:
#   #       -> If it shows like this: {ftp,ftps,ftpis}://[user@]host[:port]
#   #       -> All of the value within [] is optional. For values within {}, you must choose exactly one. All others are required.
#   #       -> Example: {ftp,ftps,ftpis}://[user@]host[:port] => ip and port: "ftp://myusername@192.168.1.2:9999" or domain: "ftps://myusername@github.com"
#   #       -> More examples: smb://user@192.168.1.2/share, smb://WORKGROUP;user@192.168.1.2/share, sftp://user@192.168.1.2/, ftp://192.168.1.2/
#   # !WARNING: - Scheme/Mount URI shouldn't contain password.
#   #           - Google Drive, One drive are listed automatically via GNOME Online Accounts (GOA). Avoid adding them.
#   #           - MTP, GPhoto2, AFC, Hard disk/drive, fstab with x-gvfs-show are also listed automatically. Avoid adding them.
#   #           - SSH, SFTP, FTP(s), AFC, DNS_SD now support [/share]. For example: sftp://user@192.168.1.2/home/user_name -> /share = /home/user_name
#   #           - ssh:// is alias for sftp://.
#   #             -> {sftp,ssh}://[user@]host[:port]. Host can be Host alias in .ssh/config file, ip or domain.
#   #             -> For example (home is Host alias in .ssh/config file: Host home):
#   #                  -> ssh://user_name@home/home/user_name -> this will mount root path, but jump to subfolder /home/user_name
#   #                  -> sftp://user_name@192.168.1.2/home/user_name -> same as above but with ip
#   #                  -> sftp://user_name@192.168.1.2:9999/home/user_name -> same as above but with ip and port
#   { on = [
#     "M",
#     "a",
#   ], run = "plugin gvfs -- add-mount", desc = "Add a GVFS mount URI" },
#
#   # Edit a Scheme/Mount URI
#   #   -> Will clear saved passwords for that mount URI.
#   { on = [
#     "M",
#     "e",
#   ], run = "plugin gvfs -- edit-mount", desc = "Edit a GVFS mount URI" },
#
#   # Remove a Scheme/Mount URI
#   #   -> Will clear saved passwords for that mount URI.
#   { on = [
#     "M",
#     "r",
#   ], run = "plugin gvfs -- remove-mount", desc = "Remove a GVFS mount URI" },
#
#   # Jump
#   { on = [
#     "g",
#     "m",
#   ], run = "plugin gvfs -- jump-to-device", desc = "Select device then jump to its mount point" },
#   # If you use `x-systemd.automount` in /etc/fstab or manually added automount unit,
#   # then you can use `--automount` argument to auto mount device before jump.
#   # Otherwise it won't show up in the jump list.
#   { on = [
#     "g",
#     "m",
#   ], run = "plugin gvfs -- jump-to-device --automount", desc = "Automount then select device to jump to its mount point" },
#   { on = [
#     "`",
#     "`",
#   ], run = "plugin gvfs -- jump-back-prev-cwd", desc = "Jump back to the position before jumped to device" },
# ]

# [manager]
# prepend_keymap = [
#   { on = [
#     "b",
#     "t",
#   ], run = "plugin --sync dual-pane --args=toggle", desc = "Dual-pane: toggle" },
#   { on = [
#     "b",
#     "b",
#   ], run = "plugin --sync dual-pane --args=toggle_zoom", desc = "Dual-pane: toggle zoom" },
#   { on = "<Tab>", run = "plugin --sync dual-pane --args=next_pane", desc = "Dual-pane: switch to the other pane" },
#   { on = "[", run = "plugin --sync dual-pane --args='tab_switch -1 --relative'", desc = "Dual-pane: switch active to previous tab" },
#   { on = "]", run = "plugin --sync dual-pane --args='tab_switch 1 --relative'", desc = "Dual-pane: switch active to next tab" },
#   { on = "1", run = "plugin --sync dual-pane --args='tab_switch 0'", desc = "Switch to the first tab" },
#   { on = "2", run = "plugin --sync dual-pane --args='tab_switch 1'", desc = "Switch to the second tab" },
#   { on = "3", run = "plugin --sync dual-pane --args='tab_switch 2'", desc = "Switch to the third tab" },
#   { on = "4", run = "plugin --sync dual-pane --args='tab_switch 3'", desc = "Switch to the fourth tab" },
#   { on = "5", run = "plugin --sync dual-pane --args='tab_switch 4'", desc = "Switch to the fifth tab" },
#   { on = "6", run = "plugin --sync dual-pane --args='tab_switch 5'", desc = "Switch to the sixth tab" },
#   { on = "7", run = "plugin --sync dual-pane --args='tab_switch 6'", desc = "Switch to the seventh tab" },
#   { on = "8", run = "plugin --sync dual-pane --args='tab_switch 7'", desc = "Switch to the eighth tab" },
#   { on = "9", run = "plugin --sync dual-pane --args='tab_switch 8'", desc = "Switch to the ninth tab" },
#   { on = "t", run = "plugin --sync dual-pane --args='tab_create --current'", desc = "Dual-pane: create a new tab with CWD" },
#   { on = "<F5>", run = "plugin --sync dual-pane --args='copy_files --follow'", desc = "Dual-pane: copy selected files from active to inactive pane" },
#   { on = "<F6>", run = "plugin --sync dual-pane --args='move_files --follow'", desc = "Dual-pane: move selected files from active to inactive pane" },
#   { on = [
#     "b",
#     "s",
#   ], run = "plugin --sync dual-pane --args=save_config", desc = "Dual-pane: save current configuration" },
#   { on = [
#     "b",
#     "l",
#   ], run = "plugin --sync dual-pane --args=load_config", desc = "Dual-pane: load saved configuration" },
#   { on = [
#     "b",
#     "r",
#   ], run = "plugin --sync dual-pane --args=reset_config", desc = "Dual-pane: reset saved configuration" },
#   { on = [
#     "b",
#     "c",
#   ], run = "plugin dual-pane --args='shell_fzf /home/dawsers/.config/yazi/dual-pane.txt'", desc = "Dual-pane: run command (use fzf)" },
#   { on = [
#     "b",
#     "i",
#   ], run = "plugin dual-pane --args='shell_fzf --interactive /home/dawsers/.config/yazi/dual-pane.txt'", desc = "Dual-pane: run command interactively (use fzf)" },
# ]
